// Code generated by MockGen. DO NOT EDIT.
// Source: ./flat.go
//
// Generated by this command:
//
//	mockgen -source ./flat.go -destination=./mocks/flat.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	dto "github.com/shhesterka04/house-service/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockFlatRepo is a mock of FlatRepo interface.
type MockFlatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFlatRepoMockRecorder
}

// MockFlatRepoMockRecorder is the mock recorder for MockFlatRepo.
type MockFlatRepoMockRecorder struct {
	mock *MockFlatRepo
}

// NewMockFlatRepo creates a new mock instance.
func NewMockFlatRepo(ctrl *gomock.Controller) *MockFlatRepo {
	mock := &MockFlatRepo{ctrl: ctrl}
	mock.recorder = &MockFlatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlatRepo) EXPECT() *MockFlatRepoMockRecorder {
	return m.recorder
}

// CreateFlat mocks base method.
func (m *MockFlatRepo) CreateFlat(ctx context.Context, flat *dto.DtoFlat) (*dto.DtoFlat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlat", ctx, flat)
	ret0, _ := ret[0].(*dto.DtoFlat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlat indicates an expected call of CreateFlat.
func (mr *MockFlatRepoMockRecorder) CreateFlat(ctx, flat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlat", reflect.TypeOf((*MockFlatRepo)(nil).CreateFlat), ctx, flat)
}

// GetFlatByHouseID mocks base method.
func (m *MockFlatRepo) GetFlatByHouseID(ctx context.Context, houseID int, userType string) ([]*dto.DtoFlat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlatByHouseID", ctx, houseID, userType)
	ret0, _ := ret[0].([]*dto.DtoFlat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlatByHouseID indicates an expected call of GetFlatByHouseID.
func (mr *MockFlatRepoMockRecorder) GetFlatByHouseID(ctx, houseID, userType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlatByHouseID", reflect.TypeOf((*MockFlatRepo)(nil).GetFlatByHouseID), ctx, houseID, userType)
}

// GetFlatByID mocks base method.
func (m *MockFlatRepo) GetFlatByID(ctx context.Context, id int) (*dto.DtoFlat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlatByID", ctx, id)
	ret0, _ := ret[0].(*dto.DtoFlat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlatByID indicates an expected call of GetFlatByID.
func (mr *MockFlatRepoMockRecorder) GetFlatByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlatByID", reflect.TypeOf((*MockFlatRepo)(nil).GetFlatByID), ctx, id)
}

// UpdateFlat mocks base method.
func (m *MockFlatRepo) UpdateFlat(ctx context.Context, flat *dto.DtoFlat) (*dto.DtoFlat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlat", ctx, flat)
	ret0, _ := ret[0].(*dto.DtoFlat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlat indicates an expected call of UpdateFlat.
func (mr *MockFlatRepoMockRecorder) UpdateFlat(ctx, flat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlat", reflect.TypeOf((*MockFlatRepo)(nil).UpdateFlat), ctx, flat)
}

// MockHouseFlatRepo is a mock of HouseFlatRepo interface.
type MockHouseFlatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHouseFlatRepoMockRecorder
}

// MockHouseFlatRepoMockRecorder is the mock recorder for MockHouseFlatRepo.
type MockHouseFlatRepoMockRecorder struct {
	mock *MockHouseFlatRepo
}

// NewMockHouseFlatRepo creates a new mock instance.
func NewMockHouseFlatRepo(ctrl *gomock.Controller) *MockHouseFlatRepo {
	mock := &MockHouseFlatRepo{ctrl: ctrl}
	mock.recorder = &MockHouseFlatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouseFlatRepo) EXPECT() *MockHouseFlatRepoMockRecorder {
	return m.recorder
}

// UpdateHouse mocks base method.
func (m *MockHouseFlatRepo) UpdateHouse(ctx context.Context, id int, updAt time.Time) (*dto.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHouse", ctx, id, updAt)
	ret0, _ := ret[0].(*dto.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHouse indicates an expected call of UpdateHouse.
func (mr *MockHouseFlatRepoMockRecorder) UpdateHouse(ctx, id, updAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHouse", reflect.TypeOf((*MockHouseFlatRepo)(nil).UpdateHouse), ctx, id, updAt)
}
