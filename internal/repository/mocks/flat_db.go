// Code generated by MockGen. DO NOT EDIT.
// Source: ./flat.go
//
// Generated by this command:
//
//	mockgen -source ./flat.go -destination=./mocks/flat_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockDBFlat is a mock of DBFlat interface.
type MockDBFlat struct {
	ctrl     *gomock.Controller
	recorder *MockDBFlatMockRecorder
}

// MockDBFlatMockRecorder is the mock recorder for MockDBFlat.
type MockDBFlatMockRecorder struct {
	mock *MockDBFlat
}

// NewMockDBFlat creates a new mock instance.
func NewMockDBFlat(ctrl *gomock.Controller) *MockDBFlat {
	mock := &MockDBFlat{ctrl: ctrl}
	mock.recorder = &MockDBFlatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBFlat) EXPECT() *MockDBFlatMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockDBFlat) Exec(ctx context.Context, sql string, args ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDBFlatMockRecorder) Exec(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBFlat)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockDBFlat) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDBFlatMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBFlat)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockDBFlat) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockDBFlatMockRecorder) QueryRow(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDBFlat)(nil).QueryRow), varargs...)
}

// MockRowDBFlat is a mock of RowDBFlat interface.
type MockRowDBFlat struct {
	ctrl     *gomock.Controller
	recorder *MockRowDBFlatMockRecorder
}

// MockRowDBFlatMockRecorder is the mock recorder for MockRowDBFlat.
type MockRowDBFlatMockRecorder struct {
	mock *MockRowDBFlat
}

// NewMockRowDBFlat creates a new mock instance.
func NewMockRowDBFlat(ctrl *gomock.Controller) *MockRowDBFlat {
	mock := &MockRowDBFlat{ctrl: ctrl}
	mock.recorder = &MockRowDBFlatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowDBFlat) EXPECT() *MockRowDBFlatMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockRowDBFlat) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowDBFlatMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRowDBFlat)(nil).Scan), dest...)
}

// MockRowsDBFlat is a mock of RowsDBFlat interface.
type MockRowsDBFlat struct {
	ctrl     *gomock.Controller
	recorder *MockRowsDBFlatMockRecorder
}

// MockRowsDBFlatMockRecorder is the mock recorder for MockRowsDBFlat.
type MockRowsDBFlatMockRecorder struct {
	mock *MockRowsDBFlat
}

// NewMockRowsDBFlat creates a new mock instance.
func NewMockRowsDBFlat(ctrl *gomock.Controller) *MockRowsDBFlat {
	mock := &MockRowsDBFlat{ctrl: ctrl}
	mock.recorder = &MockRowsDBFlatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowsDBFlat) EXPECT() *MockRowsDBFlatMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRowsDBFlat) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRowsDBFlatMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowsDBFlat)(nil).Close))
}

// Next mocks base method.
func (m *MockRowsDBFlat) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRowsDBFlatMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowsDBFlat)(nil).Next))
}

// Scan mocks base method.
func (m *MockRowsDBFlat) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowsDBFlatMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRowsDBFlat)(nil).Scan), dest...)
}
