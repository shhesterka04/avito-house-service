// Code generated by MockGen. DO NOT EDIT.
// Source: ./users.go
//
// Generated by this command:
//
//	mockgen -source ./users.go -destination=./mocks/users_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockRowDBUser is a mock of RowDBUser interface.
type MockRowDBUser struct {
	ctrl     *gomock.Controller
	recorder *MockRowDBUserMockRecorder
}

// MockRowDBUserMockRecorder is the mock recorder for MockRowDBUser.
type MockRowDBUserMockRecorder struct {
	mock *MockRowDBUser
}

// NewMockRowDBUser creates a new mock instance.
func NewMockRowDBUser(ctrl *gomock.Controller) *MockRowDBUser {
	mock := &MockRowDBUser{ctrl: ctrl}
	mock.recorder = &MockRowDBUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowDBUser) EXPECT() *MockRowDBUserMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockRowDBUser) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowDBUserMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRowDBUser)(nil).Scan), dest...)
}

// MockDBUser is a mock of DBUser interface.
type MockDBUser struct {
	ctrl     *gomock.Controller
	recorder *MockDBUserMockRecorder
}

// MockDBUserMockRecorder is the mock recorder for MockDBUser.
type MockDBUserMockRecorder struct {
	mock *MockDBUser
}

// NewMockDBUser creates a new mock instance.
func NewMockDBUser(ctrl *gomock.Controller) *MockDBUser {
	mock := &MockDBUser{ctrl: ctrl}
	mock.recorder = &MockDBUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBUser) EXPECT() *MockDBUserMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockDBUser) Exec(ctx context.Context, sql string, args ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDBUserMockRecorder) Exec(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBUser)(nil).Exec), varargs...)
}

// QueryRow mocks base method.
func (m *MockDBUser) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockDBUserMockRecorder) QueryRow(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDBUser)(nil).QueryRow), varargs...)
}
